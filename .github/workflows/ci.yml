name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

# we dont run compression extension
# in regular CI because it is a
# time consuming operation.
# we delegate it to manually triggered CI
# and only run base autobahn tests here.

jobs:
  build:
    uses: status-im/nimbus-common-workflow/.github/workflows/common.yml@main
    with:
      nim-versions: '["version-2-0", "version-2-2", "devel"]'
      test-command: |
        nim --version
        nimble --version
        nimble install -y --depsOnly
        nimble test
        env NIMFLAGS="--mm:refc" nimble test

  autobahn-test:
    name: "Autobahn test suite"
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        websock: [ws, wsc, wss, wssc]
        branch: [version-2-0, version-2-2, devel]

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest nimbus-build-system commit hash
        id: versions
        run: |
          nbsHash=$(git ls-remote "https://github.com/status-im/nimbus-build-system" "${2:-HEAD}" | cut -f 1 )
          echo "nimbus_build_system=$nbsHash" >> $GITHUB_OUTPUT

      - name: Restore prebuilt Nim from cache
        uses: actions/cache@v4
        with:
          path: NimBinCache
          key: 'nim-${{ matrix.branch }}-${{ steps.versions.outputs.nimbus_build_system }}'

      - name: Build Nim and Nimble
        run: |
          curl -O -L -s -S https://raw.githubusercontent.com/status-im/nimbus-build-system/master/scripts/build_nim.sh
          env MAKE="make -j$(nproc)" NIM_COMMIT=${{ matrix.branch }} \
            QUICK_AND_DIRTY_COMPILER=1 QUICK_AND_DIRTY_NIMBLE=1 CC=gcc \
            bash build_nim.sh nim csources dist/nimble NimBinCache
          echo '${{ github.workspace }}/nim/bin' >> $GITHUB_PATH

      - name: Get docker image cache key
        id: cache_key
        run: |
          dockerHash=$(docker buildx imagetools inspect crossbario/autobahn-testsuite | grep "Digest" | cut -d':' -f 3)
          echo "cache_key=$dockerHash" >> $GITHUB_OUTPUT

      - name: Cache Docker image
        id: cache-docker-image
        uses: actions/cache@v4
        with:
          path: /var/lib/docker # Or the specific path where your image is stored
          key: ${{ runner.os }}-docker-image-${{ steps.cache_key.outputs.cache_key }}

      - name: Pull Docker image if not cached
        if: steps.cache-docker-image.outputs.cache-hit != 'true'
        run: docker pull crossbario/autobahn-testsuite:latest

      - name: Setup dependencies
        run: |
         nimble install -y --depsOnly

      - name: Generate index.html
        # Run this step only once for all matrix combinations
        if: matrix.websock == 'ws' && matrix.branch == 'devel'
        run: |
          mkdir autobahn/reports
          sed -i "s/COMMIT_SHA_SHORT/${GITHUB_SHA::7}/g" autobahn/index.md
          sed -i "s/COMMIT_SHA/$GITHUB_SHA/g" autobahn/index.md
          cp -a autobahn/index.md > autobahn/reports/index.md

      - name: Run Autobahn test suite
        run: |
          bash scripts/${{ matrix.websock }}.sh ${{ matrix.branch }}

      - name: Upload Autobahn result
        uses: actions/upload-artifact@v4
        with:
          name: autobahn-artifact-${{ matrix.websock }}-${{ matrix.branch }}
          path: ./autobahn/reports

  # Issue related to actions/upload-artifact@v4 immutability
  # Applying Merging multiple artifacts:
  # https://github.com/actions/upload-artifact/blob/main/docs/MIGRATION.md#merging-multiple-artifacts
  merge-autobahn-artifact:
    runs-on: ubuntu-latest
    needs: autobahn-test
    steps:
      - name: Merge Autobahn Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: autobahn-report
          pattern: autobahn-artifact-*

  deploy-test:
    name: "Deploy Autobahn results"
    needs: merge-autobahn-artifact
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Download Autobahn reports
        uses: actions/download-artifact@v4
        with:
          name: autobahn-report
          path: ./autobahn_reports

      - name: Setup Python version
        uses: actions/setup-python@v5
        with:
          python-version: pypy-3.10

      - name: Setup dependencies
        run: |
         pip install markdown2

      - name: Setup dependencies
        run: |
         cat autobahn/reports/*.txt >> autobahn/reports/index.md
         markdown2 autobahn/reports/index.md > autobahn/reports/index.html

      - name: Deploy autobahn report
        uses: peaceiris/actions-gh-pages@v4
        with:
          personal_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./autobahn_reports

      - name: Delete artefacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: autobahn-report
